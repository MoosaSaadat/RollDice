{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","react_default","a","createElement","className","concat","this","props","face","rolling","Component","defaultProps","RollDice","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","dieOne","dieTwo","isRolling","doMagic","bind","assertThisInitialized","_this2","numToWords","newOne","Math","floor","random","newTwo","setState","setTimeout","src_Die_0","onClick","disabled","App","src_RollDice_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAGMA,0LAMJ,OACCC,EAAAC,EAAAC,cAAA,KACCC,UAAS,mBAAAC,OAAqBC,KAAKC,MAAMC,KAAhC,KAAAH,OAAwCC,KAAKC,MAAME,SAC3D,wBATaC,cAAZV,EACEW,aAAe,CACrBH,KAAM,MACNC,SAAS,GAYIT,QCmCAY,qBAhDd,SAAAA,EAAaL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACnBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,KACDY,MAAQ,CACZC,OAAQ,MACRC,OAAQ,MACRC,WAAW,GAEZT,EAAKU,QAAUV,EAAKU,QAAQC,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IAPIA,yEAST,IAAAa,EAAApB,KACNqB,EAAa,CAAE,MAAO,MAAO,QAAS,OAAQ,OAAQ,OACtDC,EAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UACzBC,EAASH,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7BzB,KAAK2B,SAAS,CACbb,OAAQO,EAAWC,GACnBP,OAAQM,EAAWK,GACnBV,WAAW,IAEZY,WAAW,WACVR,EAAKO,SAAS,CAAEX,WAAW,KACzB,sCAGH,OACCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,uFAKDF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACgC,EAAD,CAAK3B,KAAMF,KAAKa,MAAMC,OAAQX,QAASH,KAAKa,MAAMG,YAClDrB,EAAAC,EAAAC,cAACgC,EAAD,CAAK3B,KAAMF,KAAKa,MAAME,OAAQZ,QAASH,KAAKa,MAAMG,aAEnDrB,EAAAC,EAAAC,cAAA,UACCiC,QAAS9B,KAAKiB,QACdnB,UAAU,kBACViC,SAAU/B,KAAKa,MAAMG,WACpBhB,KAAKa,MAAMG,UAAY,aAAe,sBA1CrBZ,oBCQR4B,MARf,WACC,OACCrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACoC,EAAD,QCKiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63c3bba0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Die.css\";\r\n\r\nclass Die extends Component {\r\n\tstatic defaultProps = {\r\n\t\tface: \"one\",\r\n\t\trolling: false\r\n\t};\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<i\r\n\t\t\t\tclassName={`Die fas fa-dice-${this.props.face} ${this.props.rolling &&\r\n\t\t\t\t\t\"Die-Rolling\"}`}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Die;\r\n","import React, { Component } from \"react\";\r\nimport Die from \"./Die\";\r\nimport \"./RollDice.css\";\r\n\r\nclass RollDice extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdieOne: \"one\",\r\n\t\t\tdieTwo: \"two\",\r\n\t\t\tisRolling: false\r\n\t\t};\r\n\t\tthis.doMagic = this.doMagic.bind(this);\r\n\t}\r\n\tdoMagic () {\r\n\t\tlet numToWords = [ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ];\r\n\t\tlet newOne = Math.floor(Math.random() * 6);\r\n\t\tlet newTwo = Math.floor(Math.random() * 6);\r\n\t\tthis.setState({\r\n\t\t\tdieOne: numToWords[newOne],\r\n\t\t\tdieTwo: numToWords[newTwo],\r\n\t\t\tisRolling: true\r\n\t\t});\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.setState({ isRolling: false });\r\n\t\t}, 500);\r\n\t}\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<div className=\"RollDice\">\r\n\t\t\t\t<div className=\"RollDice-header\">\r\n\t\t\t\t\t<h1>Simple Dice App :)</h1>\r\n\t\t\t\t\t<h4>An app made to practice \"React Downward Data Flow\".</h4>\r\n\t\t\t\t\t<h4>\r\n\t\t\t\t\t\tRollDice Component sends down the \"dice face\" as props to Die\r\n\t\t\t\t\t\tComponent.\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Die face={this.state.dieOne} rolling={this.state.isRolling} />\r\n\t\t\t\t\t<Die face={this.state.dieTwo} rolling={this.state.isRolling} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={this.doMagic}\r\n\t\t\t\t\tclassName=\"RollDice-Button\"\r\n\t\t\t\t\tdisabled={this.state.isRolling}>\r\n\t\t\t\t\t{this.state.isRolling ? \"Rolling...\" : \"Roll Dice!\"}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default RollDice;\r\n","import React from \"react\";\nimport RollDice from \"./RollDice\";\nimport \"./App.css\";\n\nfunction App () {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<RollDice />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}